name: Security Scan

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Semgrep
      run: |
        curl -L https://github.com/returntocorp/semgrep/releases/latest/download/semgrep-v1.128.0-ubuntu-20.04.tgz | tar -xz
        sudo mv semgrep-v1.128.0-ubuntu-20.04/semgrep /usr/local/bin/
        
    - name: Run Semgrep security scan
      run: |
        semgrep scan --config=auto --json --output=semgrep-results.json || true
        
    - name: Run Semgrep secrets scan
      run: |
        semgrep scan --config "p/secrets" --json --output=semgrep-secrets.json || true
        
    - name: Upload Semgrep results as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: semgrep-results
        path: |
          semgrep-results.json
          semgrep-secrets.json
        retention-days: 30
        
    - name: Comment PR with security findings
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const results = JSON.parse(fs.readFileSync('semgrep-results.json', 'utf8'));
            const secrets = JSON.parse(fs.readFileSync('semgrep-secrets.json', 'utf8'));
            
            const allFindings = [...(results.results || []), ...(secrets.results || [])];
            
            if (allFindings.length === 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '‚úÖ **Security Scan Complete**\n\nNo security issues found! üéâ'
              });
            } else {
              const criticalFindings = allFindings.filter(f => f.extra.severity === 'ERROR');
              const warningFindings = allFindings.filter(f => f.extra.severity === 'WARNING');
              
              let comment = `üîç **Security Scan Results**\n\n`;
              comment += `**${allFindings.length}** total findings:\n`;
              comment += `- üî¥ **${criticalFindings.length}** critical issues\n`;
              comment += `- üü° **${warningFindings.length}** warnings\n\n`;
              
              if (criticalFindings.length > 0) {
                comment += `### Critical Issues:\n`;
                criticalFindings.slice(0, 5).forEach(finding => {
                  comment += `- **${finding.path}:${finding.start.line}** - ${finding.extra.message}\n`;
                });
                if (criticalFindings.length > 5) {
                  comment += `- ... and ${criticalFindings.length - 5} more\n`;
                }
                comment += `\n`;
              }
              
              if (warningFindings.length > 0) {
                comment += `### Warnings:\n`;
                warningFindings.slice(0, 3).forEach(finding => {
                  comment += `- **${finding.path}:${finding.start.line}** - ${finding.extra.message}\n`;
                });
                if (warningFindings.length > 3) {
                  comment += `- ... and ${warningFindings.length - 3} more\n`;
                }
                comment += `\n`;
              }
              
              comment += `üìã **Full results available in workflow artifacts**\n`;
              comment += `üîß **Recommendation**: Review and fix critical issues before merging.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.error('Error processing Semgrep results:', error);
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå **Security Scan Error**\n\nUnable to process security scan results. Please check the workflow logs.'
            });
          }
          
    - name: Fail on critical findings
      if: github.event_name == 'pull_request'
      run: |
        if [ -f semgrep-results.json ]; then
          CRITICAL_COUNT=$(jq '.results | map(select(.extra.severity == "ERROR")) | length' semgrep-results.json)
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå Found $CRITICAL_COUNT critical security issues. Please fix them before merging."
            exit 1
          fi
        fi

    - name: Run npm audit
      run: npm audit --audit-level=high || true

    - name: Run Snyk Open Source scan
      run: snyk test || true

    - name: Run Snyk Code scan
      run: snyk code test || true

    - name: Run Trivy file system scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.' 